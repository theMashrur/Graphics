{"camera":{"position":[-3.7517819771715772,3.2636244627259217,39.68970757465099],"target":[0,0,0],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":"teapot","position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","blendEnable":true,"blendOperation":"FUNC_ADD","srcColorBlendFactor":"SRC_ALPHA","dstColorBlendFactor":"ONE_MINUS_SRC_ALPHA","srcAlphaBlendFactor":"SRC_ALPHA","dstAlphaBlendFactor":"ONE_MINUS_SRC_ALPHA","textureFiltering":"LINEAR_MIPMAP_LINEAR","maxAnisotropy":"1"},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex position in object space coordinates\nin vec3 vertexPosition;\n// Surface normal at the vertex in object space coordinates\nin vec3 vertexNormal;\n// Texture coordinates at that vertex\nin vec2 vertexTextureCoordinates;\n\n// Model matrix\nuniform mat4 mMatrix;\n// View matrix\nuniform mat4 vMatrix;\n// Projection matrix\nuniform mat4 pMatrix;\n\nuniform float lightIntensity;\nuniform bool lightInCamspace;\nuniform vec4 lightPosition;\nuniform vec4 ambient;\nuniform vec4 specular;\nuniform vec4 diffuse;\nuniform float shininess;\n\n// Output color to be interpolated for each fragment\nout vec4 color;\n\n// Main program for each vertex\nvoid main() {\nvec4 vertexCamSpace = vMatrix * mMatrix * vec4(vertexPosition, 1.0);\ngl_Position = pMatrix * vertexCamSpace;\nvec3 normalCamSpace = (vMatrix * mMatrix * vec4(vertexNormal, 0.0)).xyz;\nvec3 normal = normalize(normalCamSpace);\n// Compute lighting for each vertex\nvec3 lightDirection;\nif (lightInCamspace) {\nlightDirection = (lightPosition - vertexCamSpace).xyz;\n} else {\nvec4 lightCamSpace = vMatrix * lightPosition;\nlightDirection = (lightCamSpace - vertexCamSpace).xyz;\n}\n\nfloat d = length(lightDirection);\n// Inverse Square Law\nfloat lightInt = lightIntensity/(4.0 * 3.14 * d);\nlightDirection = normalize(lightDirection);\n\n// Diffuse Term, making sure non-negative\nvec3 diffuseReflection = diffuse.xyz * lightIntensity * max(dot(lightDirection, normal), 0.0);\n\nvec3 viewDirection = normalize(-vertexCamSpace.xyz);\nvec3 halfwayDirection = normalize(lightDirection + viewDirection);\n// Specular Term, making sure, non-negative\nfloat specularReflection = pow(max(dot(normal, halfwayDirection), 0.0), shininess);\nvec3 specularColor = specular.xyz * lightIntensity * specularReflection;\n\ncolor = vec4(diffuseReflection + specularColor, 1.0) + ambient;\n}"},"fragment":{"source":"#version 300 es\n\n// For better performance less precision\nprecision highp float;\nout vec4 fragColor;\n\n// Interpolated color from vertex shader\nin vec4 color;\n\n// Main program for each fragment = pixel candidate\nvoid main() {\nfragColor = color;\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"lightIntensity":{"value":[1]},"lightInCamspace":{"value":[false]},"lightPosition":{"value":[1,0,34,1]},"ambient":{"value":[1,0,0,1]},"specular":{"value":[1,1,1,1]},"diffuse":{"value":[1,0,0,1]},"shininess":{"value":[10]}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex coordinates in object space for the render quad\nin vec3 vertexPosition;\n// Texture coordinate for this vertex and the render quad\nin vec2 vertexTextureCoordinates;\n\n// Texture coordinate needs to be passed on to the R2T fragment shader\nout vec2 fragmentTextureCoordinates;\n\n// Main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  fragmentTextureCoordinates = vertexTextureCoordinates;\n}"},"fragment":{"source":"#version 300 es\n\nprecision highp float;\n\n// A texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n// Texture coordinates coming from the vertex shader, interpolated through the rasterizer\nin vec2 fragmentTextureCoordinates;\nout vec4 fragColor;\n\n// Main program for each fragment of the render quad\nvoid main() {\n  fragColor = texture(textureRendered, fragmentTextureCoordinates.st);\n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"}}}}}},"output":{"image":"Quad/R2T Pass color"}}